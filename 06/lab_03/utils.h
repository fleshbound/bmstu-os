#ifndef UTILS_H
#define UTILS_H

const char *environ_params[] = {
    "LS_COLORS"    
}; 

const char *stat_with_descr[] = {
    "(1) pid  %s - уникальный идентификатор процесса.\n",
    "(2) comm %s - имя исполняемого файла в круглых скобках.\n",
    "(3) state  %s - состояние процесса.\n",
    "(4) ppid  %s - уникальный идентификатор процесса-предка.\n",
    "(5) pgrp  %s - уникальный идентификатор группы.\n",
    "(6) session  %s - уникальный идентификатор сессии.\n",
    "(7) tty_nr  %s - управляющий терминал.\n",
    "(8) tpgid  %s - уникальный идентификатор группы управляющего терминала.\n",
    "(9) flags  %s - флаги.\n",
    "(10) minflt  %s - количество незначительных сбоев, которые возникли при выполнении процесса, и которые не требуют загрузки страницы памяти c диска.\n",
    "(11) cminflt  %s - количество незначительных сбоев, которые возникли при ожидании окончания работы процессов-потомков.\n",
    "(12) majflt  %s - количество значительных сбоев, которые возникли при работе процесса, и которые потребовали загрузки страницы памяти c диска.\n",
    "(13) cmajflt  %s - количество значительных сбоев, которые возникли при ожидании окончания работы процессов-потомков.\n",
    "(14) utime  %s - количество тиков, которые данный процесс провел в режиме пользователя.\n",
    "(15) stime  %s - количество тиков, которые данный процесс провел в режиме ядра.\n",
    "(16) cutime  %s - количество тиков, которые процесс, ожидающий завершения процессов-потомков, провёл в режиме пользователя.\n",
    "(17) cstime  %s - количество тиков, которые процесс, ожидающий завершения процессов-потомков, провёл в режиме ядра.\n",
    "(18) priority  %s - для процессов реального времени.\n",
    "(19) nice  %s - значение для nice в диапазоне от наиболее низкий приоритет до наивысший приоритет.\n",
    "(20) num_threads  %s - число потоков в данном процессе.\n",
    "(21) itrealvalue  %s - количество мигов до того, как следующий SIGALARM будет послан процессу интервальным таймером.\n",
    "(22) starttime  %s - время в тиках запуска процесса после начальной загрузки системы.\n",
    "(23) vsize  %s - размер виртуальной памяти в байтах.\n",
    "(24) rss  %s - резидентный размер: количество страниц, которые занимает процесс в памяти. \n",
    "(25) rsslim  %s - текущий лимит в байтах на резидентный размер процесса.\n",
    "(26) startcode  %s - адрес, выше которого может выполняться код программы.\n",
    "(27) endcode  %s - адрес, ниже которого может выполняться код программ.\n",
    "(28) startstack  %s - адрес начала стека.\n",
    "(29) kstkesp  %s - текущее значение ESP (указателя стека).\n",
    "(30) kstkeip  %s - текущее значение EIP (указатель команд).\n",
    "(31) signal  %s - битовая карта ожидающих сигналов (Устарело).\n",
    "(32) blocked  %s - битовая карта блокируемых сигналов (Устарело).\n",
    "(33) sigignore  %s - битовая карта игнорируемых сигналов (Устарело).\n",
    "(34) sigcatch  %s - битовая карта перехватываемых сигналов (Устарело).n",
    "(35) wchan  %s - \"канал\", в котором ожидает процесс. \n",
    "(36) nswap  %s - количество страниц на своппинге (не обслуживается).\n",
    "(37) cnswap  %s - суммарное swap для процессов-потомков (не обслуживается).\n",
    "(38) exit_signal  %s - сигнал, который будет послан предку, когда процесс завершится.\n",
    "(39) processor  %s - номер процессора, на котором последний раз выполнялся процесс.\n",
    "(40) rt_priority  %s - приоритет планирования реального времени.\n",
    "(41) policy  %s - политика планирования.\n",
    "(42) delayacct_blkio_ticks  %s - суммарные задержки ввода/вывода в тиках.\n",
    "(43) guest_time  %s - гостевое время процесса в тиках.\n",
    "(44) cguest_time  %s - гостевое время для потомков процесса в тиках.\n",
    "(45) start_data  %s - адрес, выше которого размещаются инициализированные и неинициализированные (BSS) данные программы.\n",
    "(46) end_data  %s - адрес, ниже которого размещаются инициализированные и неинициализированные (BSS) данные программы.\n",
    "(47) start_brk  %s - адрес, выше которого куча программы может быть расширена c использованием brk().\n",
    "(48) arg_start  %s - адрес, выше которого размещаются аргументы командной строки (argv).\n",
    "(49) arg_end  %s - адрес, ниже которого размещаются аргументы командной строки (argv).\n",
    "(50) env_start  %s - адрес, выше которого размещается окружение программы.\n",
    "(51) env_end  %s - адрес, ниже которого размещается окружение программы.\n",
    "(52) exit_code  %s - статус завершения потока в форме, возвращаемой waitpid().\n"
};


const char *stat_no_descr[] = 
{
    "(1) pid            \t%s\n",
    "(2) comm           \t%s\n",
    "(3) state          \t%s\n",
    "(4) ppid           \t%s\n",
    "(5) pgrp           \t%s\n",
    "(6) session        \t%s\n",
    "(7) tty_nr         \t%s\n",
    "(8) tpgid          \t%s\n",
    "(9) flags          \t%s\n",
    "(10) minflt        \t%s\n",
    "(11) cminflt       \t%s\n",
    "(12) majflt        \t%s\n",
    "(13) cmajflt       \t%s\n",
    "(14) utime         \t%s\n",
    "(15) stime         \t%s\n",
    "(16) cutime        \t%s\n",
    "(17) cstime        \t%s\n",
    "(18) priority      \t%s\n",
    "(19) nice          \t%s\n",
    "(20) num_threads   \t%s\n",
    "(21) itrealvalue   \t%s\n",
    "(22) starttime     \t%s\n",
    "(23) vsize         \t%s\n",
    "(24) rss           \t%s\n",
    "(25) rsslim        \t%s\n",
    "(26) startcode     \t%s\n",
    "(27) endcode       \t%s\n",
    "(28) startstack    \t%s\n",
    "(29) kstkesp       \t%s\n",
    "(30) kstkeip       \t%s\n",
    "(31) signal        \t%s\n",
    "(32) blocked       \t%s\n",
    "(33) sigignore     \t%s\n",
    "(34) sigcatch      \t%s\n",
    "(35) wchan         \t%s\n",
    "(36) nswap         \t%s\n",
    "(37) cnswap        \t%s\n",
    "(38) exit_signal   \t%s\n",
    "(39) processor     \t%s\n",
    "(40) rt_priority   \t%s\n",
    "(41) policy        \t%s\n",
    "(42) delayacct_blkio_ticks  \t%s\n",
    "(43) guest_time    \t%s\n",
    "(44) cguest_time   \t%s\n",
    "(45) start_data    \t%s\n",
    "(46) end_data      \t%s\n",
    "(47) start_brk     \t%s\n",
    "(48) arg_start     \t%s\n",
    "(49) arg_end       \t%s\n",
    "(50) env_start     \t%s\n",
    "(51) env_end       \t%s\n",
    "(52) exit_code     \t%s\n"
};

const char *statm_patterns[] = 
{
        "size     %s  (1)\n",
        "resident %s  (2)\n",
        "shared   %s  (3)\n",
        "text     %s  (4)\n",
        "lib      %s  (5)\n",
        "data     %s  (6)\n",
        "dt       %s  (7)\n"
};

#endif
